@model aspnet.ViewModel.DiscussViewModel
@{
    ViewData["Title"] = "Discuss";
}

@if (Model.IsAdmin)
{

    <form asp-action="Delete" asp-controller="Forum" method="post" asp-route-id="@Model.Id">
        <a style="margin:10px" class="btn btn-sm btn-default" asp-action="Edit" asp-route-id="@Model.Id">Edit</a>
        <button type="submit" class="btn btn-sm">
            Delete
        </button>
    </form>
}


<h2><markdown content="@Model.Name" /></h2>

<h4><markdown content="@Model.Description" /></h4>

<hr />

@if (Model.Messages != null)
{
    <div id="message-container-id" style="max-height:350px; overflow-y:scroll">
        @foreach (var message in Model.Messages)
        {
            <div style="margin:10px; padding:0px" id="@message.Id">
                <div style="display:flex">
                    <div style="margin-right:auto; font-size:12px">
                        <span>by <a href="#">@message.User.UserName</a></span>
                        <span> @message.CreationTime.ToString()</span>
                    </div>

                    @if (Model.IsAdmin || Model.User.UserName == message.User.UserName)
                    {
                        <div>
                            <a class="btn btn-sm btn-default" asp-action="EditMessage" asp-route-id="@message.Id">Edit</a>
                            <button type="submit" class="btn btn-sm" onclick="deleteMessage(@message.Id)">
                                Delete
                            </button>
                        </div>
                    }

                </div>


                <div style="margin-left:20px">
                    <markdown content="@message.Text" />
                </div>
                <hr />
            </div>

        }
    </div>
}

@if (User.Identity.IsAuthenticated)
{
    <form asp-action="Discuss" asp-controller="Forum" method="post" asp-route-id="@Model.Id" asp-net>
        <input hidden name="UserName" id="UserName" type="text" value="@User.Identity.Name">
        <input hidden value="@Model.Id" name="id" id="id">
        <div class="row">
            <div class="col-6">
                <textarea style="margin:10px" placeholder="Your comment..."
                          class="form-control" rows="3" name="messageInput" id="messageInput"></textarea>


                <div class="form-group">
                    <input type="submit" value="Submit" name="sendButton" class="btn btn-success" id="sendButton" />
                </div>

            </div>
        </div>
    </form>
}

<script src="~/lib/signalr/dist/browser/signalr.js"></script>
<script type="text/javascript">
    var connection = new signalR.HubConnectionBuilder().withUrl("/kek").build();

    updateMessages = (id, userName, messageText, creationTime) => {
        const container = $('#message-container-id');
        var currUserName = document.getElementById("UserName").value;
        var top = `<div style="margin:10px; padding:0px" id=${id}>
            <div style="display:flex">
                <div style="margin-right:auto; font-size:12px">
                    <span>by <a href="#">${userName}</a></span>
                    <span> ${creationTime}</span>
                </div>`;
        var bottom = `            </div>
            <div style="margin-left:20px">
                ${messageText}
            </div>
           <hr />
        </div>`;
        var buttons = `
           <a class="btn btn-sm btn-default" href="/Forum/EditMessage/${id}">Edit</a>
            <button type="submit" class="btn btn-sm" onclick="deleteMessage(${id})">
                Delete
            </button>
            `;

        var result = top;
        if (currUserName == userName) {
            result += buttons;
        }
        result += bottom;
        container.append(result);

        $('#messageInput').val('');
        container.scrollTop(container[0].scrollHeight);

    };

    deleteMessage = (id) => {
        connection.invoke("DeleteMessage", id).catch(function (err) {
            return console.error(err.toString);
        });
    }

    //Disable send button until connection is established
    document.getElementById("sendButton").disabled = true;

    connection.on("ReceiveMessage", function (id, user, message, date) {
        updateMessages(id, user, message, date);
    });

    connection.on("DeleteMessageFrom", function (id) {
        var element = document.getElementById(+id);
        var parent = element.parentElement;
        parent.removeChild(element);
    });

    connection.start().then(function () {
        document.getElementById("sendButton").disabled = false;
    }).catch(function (err) {
        return console.error(err.toString());
    });

    document.getElementById("sendButton").addEventListener("click", function (event) {
        var user = document.getElementById("UserName").value;
        var message = document.getElementById("messageInput").value;
        var id = document.getElementById("id").value;
        connection.invoke("SendMessage", user, message, id).catch(function (err) {
            return console.error(err.toString());
        });
        event.preventDefault();
    });

</script>